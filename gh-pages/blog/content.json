{"is404":false,"staticData":{"158010175":"{\"parsedFrontmatter\":{\"slug\":\"css-aspect-ratio\",\"title\":\"Using Aspect Ratio in CSS\",\"tags\":[\"web\"],\"publishDate\":\"2018-09-12\",\"description\":\"The aspect ratio of an element describes the proportional relationship between its width and its height.\"},\"withoutFrontmatter\":\"\\nThe aspect ratio of an element describes the proportional relationship between its width and its height.\\nDepending on the device you are using to access a responsive web page the content may be a different size. The same content will most likely need to keep its\\naspect ratio whatever the device so that the content makes sense and looks good. It is all about looking good.\\n\\nIn front end web development there are different ways to determine the aspect ratio of an element. These include defining height/width in ems and defining the  \\nfont-size of a given element and using viewport width, vw to style responsively.\\n\\nThere are many mixins for sass, which make light work of aspect ratios.\\nThis post is to briefly explain a way to achieve a scalable image using the :before pseudo class and parent and its child element.\\n\\nLet's use two separate div elements, one called _.image_, and inside of that another, _.image\\\\_\\\\_content_.\\n\\nThe goal here is to position .image 'relatively' so that it will take on a parental role.\\nWe want our _.image\\\\_\\\\_content_ to completely fill _.image_, which can be done by telling _.image\\\\_\\\\_content_ to have a ‘position: absolute’ and telling it to begin at each side of the _.image_ div.\\nNext we will add a background-image too.\\nWe will make our _.image:before_ class have ‘width: 100%’ and instruct it that it has content. Both our _.image\\\\_\\\\_content_ and _:before_ class need to be ‘block’ elements.\\nBy adding padding-top to the _.image:before_, we determine the height of _.image\\\\_\\\\_content_ and its background-image.\\n\\nAll that is left to do is to set the width of _.image_ now that _.image\\\\_\\\\_content_ fills it and is set to the correct aspect-ratio.\\nSee below for a working example &darr. :point_down:\\n\\n**HTML**\\n\\n```html\\n<div class=\\\"image\\\">\\n  <div class=\\\"image__content\\\"></div>\\n</div>\\n```\\n\\n**CSS**\\n\\n```css\\n.image {\\n  position: relative;\\n  width: 40%;\\n}\\n\\n.image:before {\\n  display: block;\\n  width: 100%;\\n  content: '';\\n  padding-top: 77%;\\n  /*padding-top = height/width x 100  */\\n}\\n\\n.image__content {\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  background-image: url('https://lh3.google.com/u/0/d/1M2D3jyM95cnEho6Q7RK6PAy7-QD5PQHg=w1920-h956-iv1');\\n  background-size: contain;\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\\n```\\n\"}","1075922745":"{\"parsedFrontmatter\":{\"slug\":\"signalr-vs-socketio\",\"title\":\"SignalR vs. Socket.IO\",\"tags\":[\"web\"],\"publishDate\":\"2019-06-19\",\"description\":\"Websockets use push notifications to send data from server to client. Which websocket should ,you chose?\"},\"withoutFrontmatter\":\"\\nSignalR is a Microsoft service for web applications. It is a library which allows a server-side component to interact with a corresponding client-side component. SignalR uses websockets to push notifications from server to client.\\n\\nImagine two students being naughty in their teacherless classroom. (Shocking :o ) A third student acts as a lookout and shouts “teacher’s coming” only when the teacher is actually coming back, so the first and second students can keep on playing without keeping an eye on the door.\\n\\n### For example...\\n\\nReal-world uses of the SignalR library could be a messenger app that updates when you are typing, a flight site - like Skyscanner taking bookings, or an e-commerce site, displaying different products.\\n\\n### Is it useful?\\n\\nSignalR only talks to the client-side of a web application when it notices an update. It sends notifications in real-time. This is useful as it saves the application from fetching data from the server on a set interval (polling) and looking for any differences.\\n\\n### Is SignalR my only hope?\\n\\nThere are plenty of alternatives to Microsoft’s SignalR, some attracting favourable reviews. SocketIO is an alternative as are NodeJS, Pusher, used by Groupon, and Google’s Cloud messaging service - Pub/Sub.\\nIt is worth noting SignalR.net core is a free open-source library that works on both linux and Windows and is preferable to SignalR.net, which requires a Microsoft system.\\n[Stackshare](https://stackshare.io/stackups/pusher-vs-signalr-vs-socket-io) offers an overview of some popular services.\\n\\n### Verdict\\n\\n#### SocketIO\\n\\nThe SocketIO Api comes well documented and includes an easy-to-follow tutorial for setting up a “Hello World” chat application. The server-side logic can be written in a few different languages, including Javascript :), that are documented on their site.\\n\\n#### SignalR\\n\\nMicrosoft have included in SignalR, in the ‘ASP.net core v2.2’ Github repository, a number of helpful example projects and that the SignalR documentation is relatively clear and concise.\\nIt is also worth mentioning that if using SignalR for app development, there are well-supported, up-to-date libraries that work with SignalR.\\n\"}","1126055953":"{\"parsedFrontmatter\":{\"slug\":\"a-year-of-javascript\",\"title\":\"One Year Of JavaScript\",\"tags\":[\"web\"],\"publishDate\":\"2019-10-01\",\"description\":\"At the time of writing this post, I have been a full-time frontend developer for a little over one year. Here are some thoughts.\"},\"withoutFrontmatter\":\"\\nAt the time of writing this post, I have been a full-time frontend developer for a little over one year.  \\nIt seemed like a good opportunity to jot down some thoughts on how the year has been, what I have learned and where I would like to be come this time next year.\\n\\n### Previous experience\\n\\nWhen I started working as a full-time frontend dev I had a few months experience using HTML, CSS and JS, as well as a knowledge of Bootstrap. And a little bit of jQuery.\\n\\n### What I thought\\n\\nThere were a few points when I thought I knew a little about frontend web development but there were a lot more times when I felt like I knew nothing because the amount to learn seemed like too much.\\n\\n### How the year has been\\n\\nReal-world tasks have made me feel more confident in my ability to problem-solve and build applications.\\nThere have been people around to help with tricky tasks but I have also been left alone to bugfix and maintain the JavaScript for a large interactive selling page, with plenty of legacy code.\\n\\n### Resources I recommend\\n\\nThis is just a VERY small list of things I incorporate into each month:\\n\\n- Technical books - Code complete is a great resource. There are many others including the O’Reilly series\\n- ‘Javascript/ReactJs Weekly’ circular email - keep up with the world of JS\\n- Meetups - Important!! A great chance to learn from others and meet local devs and network.\\n\\n### Some advice\\n\\nI have had input and advice from people with experience. Here are some pointers I have drawn from this year:\\n\\n- **Ask questions**  \\n  You are expected to get good at problem solving, a lot of which will be independent. You will not remember everything because you are not Superman or an elephant(elephants never forget, btw) and you may not be able to troubleshoot an issue in a reasonable timescale, at which point asking the question is a smart decision.\\n  Go for a walk. A few minutes away from your screen allows you to view a problem with fresh eyes.  \\n  I noticed a pattern in the type of question I asked -\\n  “have you tried [insert straightforward check]?” Or something similar. The solution to most problems is usually logical. Break it down… Ask yourself the question first and action the answer you would give. (Taking a break will help with asking better questions)\\n\\n- **Right tools for the job**  \\n  You may be confident using a technology, but there may be something out there waiting for you that will better suit your end product. It never hurts to see what’s out there.\\n\\n- **Measure twice, cut once**  \\n  Don’t rush into a project without first having a sound understanding of what is needed\\n  “If the foundation [of a house] hasn’t been laid well or the planning is inadequate, the best you can do during construction is to keep damage to a minimum.”  \\n  -Steve McConnell, Code Complete\\n\\n- **MVP (minimum viable product), start something and build upwards**  \\n  Only start something you can finish. Release something basic and functional, THEN fix any bugs, add functionality and develop features. The longer a project is open and unfinished, the more likely it is for any original plan to drift away down stream.\\n\\n### What next\\n\\nI am now familiar with Javascript. I will continue to improve using React.Js this year and maybe explore some server-side Javascript(Node).\\n\"}","1861848071":"{\"parsedFrontmatter\":{\"slug\":\"the-state-of-react-in-2019\",\"title\":\"The state of React in 2019\",\"tags\":[\"web\"],\"publishDate\":\"2019-03-28\",\"description\":\"React encourages breaking elements into smaller components.\"},\"withoutFrontmatter\":\"\\nReact is a popular library for building interfaces. In a broad stroke it separates creation and rendering of elements in the DOM. This offers notable performance gains.\\nReact encourages breaking elements into smaller components, which can make large applications more robust and scalable.\\n\\n## How does React pass data to components?\\n\\nReact components contain different ways to pass in and handle the data we need. The two main ways to hand data to a component are to add properties - that is, **props** - or to define its **state**.\\n\\n## What is a prop?\\n\\nComponents can be passed parameters on creation. These parameters are called props and work in a similar way to arguments passed to a vanilla JavaScript function.\\n\\n```js\\nconst Cat = ({ image, name }) => {\\n  return (\\n    <div className='animal'>\\n      <img src={image} />\\n      <span>{name}</span>\\n    </div>\\n  );\\n};\\n\\nconst component = <Cat image='./tabby.jpg' name='Tabby' />;\\nReactDOM.render(component, document.getElementById('reactContainer'));\\n```\\n\\n## What is a state?\\n\\nA component’s state is essentially a local-scoped object that can change and be updated. It can only be accessed within the scope of the individual component.\\n\\n```js\\n\\n  class WeatherApp extends React.Component {\\n    constructor(props) {\\n      super(props);\\n      this.state = {\\n        temperature: {\\n          current: getTemperature()\\n        }\\n      };\\n    }\\n\\n    getTemperature() {...}\\n\\n    render() {\\n        return (\\n          <div>\\n            <h1>The current temperature is {this.state.temperature.current}.</h1>\\n          </div>\\n        );\\n      }\\n    }\\n\\n```\\n\\nThe data passed to **WeatherApp** comes from its state, which gets updated by **getTemperature()**. For more information on using React with states I recommend the [official documentation](https://reactjs.org/docs/state-and-lifecycle.html).\\n\\n## What are the differences?\\n\\nThe difference between state and props of a component is that the state of a component can be changed; the properties of a component cannot be changed from inside the component.\\nUpdates to the props of a component must come from being passed new values.\\n\\n## When should I use state in my application?\\n\\nThere are different ways to organize components. One approach is to split components into presentational and container components.\\n\\n- **Presentational components** - are concerned with displaying UI and where necessary receiving data for use elsewhere in an App.  \\n  ‘[presentational components should] receive data as props and send data to their parent component via callback function properties.’\\n\\n- **Container components** - are components that connect presentational components to the data.\\n\\nDan Abramov, co-creator of Redux, cautions against dogmatically following this approach but it may suit certain situations.  \\nI see it as a useful addition to your react programming toolbox.\\n\\nI hope this post has proved helpful. The key point I took from writing this post is that, as with most things in life, it pays to **stop** and know **what you are trying to achieve** and **what tools best serve this end** all before starting a project.\\n\"}","2103259312":"{\"parsedFrontmatter\":{\"slug\":\"optimised-selecting-and-styling-in-js\",\"title\":\"Optimised Selecting and Styling using vanilla JS\",\"tags\":[\"web\"],\"publishDate\":\"2018-12-28\",\"description\":\"Ways to edit styles/ select elements in the DOM using JavaScript and CSS.\"},\"withoutFrontmatter\":\"\\nThis week I have been going through some old code and trying to improve page performance.  \\nOne significant way to improve performance on a web page or application is by looking at interactions between any javascript and the DOM. This can be a way to make quick improvements to overall performance on a site.\\n\\nGoogle offers a tool called _testmysite_, which does just that. They let you know site speed and offer improvements.  \\n<https://www.thinkwithgoogle.com/intl/en-gb/feature/testmysite>\\n\\nAlso, JSperf (<https://jsperf.com/>) allows you to see how fast different cases perform on different browsers.  \\nYou can find test cases for basic methods and ideas with a cursory search and adding jsperf to your query.\\n\\nThis article is just a few ways to edit styles/ select elements in the DOM using javascript and css. In no particular order here are some ideas:\\n\\n1.  **Use CSS selectors to style elements**  \\n     Dynamically styling the odd DOM element is unavoidable. For these occasions updating we can add/remove classes and use nested or relative css selectors to control any changes.  \\n     **JS**\\n\\n    ```js\\n    let container = document.getElementsByClassName('container')[0];\\n    let containerArrow = container.querySelector('.container:after');\\n    container.style.border = '2px solid red';\\n    container.style.color = 'red';\\n    container.style.marginTop = '10px';\\n    ```\\n\\n    Alternatively we can achieve the same result by styling this container and pseudo using css a class.\\n\\n    **CSS**\\n\\n    ```css\\n    .container {\\n      border: 2px solid black;\\n      margin-top: 0px;\\n    }\\n    .container:after {\\n      color: black;\\n    }\\n\\n    .container--error {\\n      border: 2px solid red;\\n      margin-top: 10px;\\n    }\\n\\n    .container--error:after {\\n      color: red;\\n    }\\n    ```\\n\\n    By using class styles, stored in css, it is more clear what our is happening too.  \\n    Here is a list of selectors to get you started:  \\n    <https://www.w3schools.com/cssref/css_selectors.asp>\\n\\n2.  **Select an ID, node or class and traverse**  \\n    According to a few jsperf tests the best way to select an element is by selecting an object by its ID or node (eg. div, or table), or class and traversing to nearby elements.  \\n     The reason that this is better than selecting individual elements is that there is just one interaction between the DOM and javascript script.  \\n    <https://javascript.info/dom-navigation>\\n\\n3.  **Store references to DOM objects in variables**  \\n    If you plan to select an element more than than once you should consider storing a reference of it in a variable. This means that your javascript know what is looking for and where it can find it.\\n\\nThis article only covers a couple of ways to be more performant, and is by no means exhaustive. Please leave a comment below with any other suggestions.\\n\"}","2611862086":"[\"content/a-year-of-javascript.md\",\"content/css-aspect-ratio.md\",\"content/optimised-selecting-and-styling-in-js.md\",\"content/signalr-vs-socketio.md\",\"content/the-state-of-react-in-2019.md\"]"},"path":"blog"}